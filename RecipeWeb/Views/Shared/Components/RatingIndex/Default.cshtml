@model RecipeWeb.Models.RatingViewModel

<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link rel="stylesheet" href="~/Components/rating.css" asp-append-version="true" />

</head>

<body>
    <div class="rating-section">
        <div class="rating-header">
            <div>
                <span class="rating-value">@Model.AverageRating.ToString("0.0")</span>
                <span class="rating-text">out of 5</span>
            </div>
            <div class="stars">
                @for (int i = 1; i <= 5; i++)
                {
                    <i class="fas fa-star @(i <= Model.AverageRating ? "rated" : "unrated")"></i>
                }
            </div>
            <div class="rating-count">(@Model.TotalRatings Ratings)</div>
        </div>

        <div class="rating-buttons">
            <button class="active" onclick="filterReviews(0)">All</button>
            @for (int i = 5; i >= 1; i--)
            {
                <button onclick="filterReviews(@i)">
                    @i Star (@(Model.RatingGroups.ContainsKey(i) ? Model.RatingGroups[i] : 0))
                </button>
            }
        </div>
    </div>

    <div class="review-container">
        <p id="no-review-message" style="display: none; text-align: center; color: #888; font-size: 1.1em; margin-top: 10px;"></p>

        <div class="review-list">
            @foreach (var rating in Model.Ratings)
            {
                <div class="review" data-rating="@rating.RatingScore">
                    <div class="avatar">
                        @await Component.InvokeAsync("AvatarComment", new { userId = rating.UserId })
                    </div>
                    <div class="review-content">
                        <h3 class="username">@rating.User?.UserName</h3>
                        <div class="stars">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <i class="fas fa-star @(i <= rating.RatingScore ? "rated" : "unrated")"></i>
                            }
                        </div>
                        <div class="date-time">@rating.CreatedAt?.ToString("dd-MM-yyyy HH:mm")</div>
                        <p class="rating-comment">@rating.Commnent</p>
                    </div>
                </div>
            }
        </div>
    </div>

    <script>
        function filterReviews(star) {
            document.querySelectorAll(".rating-buttons button").forEach(btn => btn.classList.remove("active"));
            event.target.classList.add("active");

            document.querySelectorAll(".review").forEach(review => {
                let rating = review.getAttribute("data-rating");
                if (star == 0 || rating == star) {
                    review.style.display = "flex";
                } else {
                    review.style.display = "none";
                }
            });
        }

                function filterReviews(star) {
            document.querySelectorAll(".rating-buttons button").forEach(btn => btn.classList.remove("active"));
            event.target.classList.add("active");

            let reviews = document.querySelectorAll(".review");
            let hasReview = false;

            reviews.forEach(review => {
                let rating = review.getAttribute("data-rating");
                if (star == 0 || rating == star) {
                    review.style.display = "flex";
                    hasReview = true;
                } else {
                    review.style.display = "none";
                }
            });

            let noReviewMessage = document.getElementById("no-review-message");
            if (!hasReview) {
                noReviewMessage.innerText = star + " Star reviews have not been given yet.";
                noReviewMessage.style.display = "block";
            } else {
                noReviewMessage.style.display = "none";
            }
        }

    </script>
</body>
</html>
